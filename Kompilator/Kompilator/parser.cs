// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-16K5I1G
// DateTime: 28/07/2020 13:28:14
// UserName: 48502
// Input file <parser.y - 30/06/2020 21:46:55>

// options: conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Kompilator
{
public enum Tokens {error=2,EOF=3,Program=4,Assign=5,Or=6,
    And=7,Pipe=8,Equal=9,NotEqual=10,BitAnd=11,Greater=12,
    GreaterEqual=13,Less=14,LessEqual=15,Plus=16,Minus=17,Multiplies=18,
    Divides=19,Tilde=20,Not=21,If=22,Else=23,While=24,
    Read=25,Write=26,OpenPar=27,ClosePar=28,BracketLeft=29,BracketRight=30,
    Semicolon=31,Endl=32,Eof=33,Error=34,Int=35,Double=36,
    Bool=37,Ident=38,IntNumber=39,RealNumber=40,Napis=41,Komentarz2=42,
    True=43,False=44,Return=45};

public struct ValueType
#line 4 "parser.y"
{
public string  val;
public SyntaxTree tree;
public string oper;
public Typ typ;
public int line;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[71];
  private static State[] states = new State[124];
  private static string[] nonTerms = new string[] {
      "typ", "block", "declars", "instrs", "declar", "instr", "exp", "cond", 
      "whileLoop", "inRead", "outWrite", "boolVar", "bitexp", "term", "adding", 
      "rel", "logic", "unar", "factor", "line", "start", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,4,2,122},new int[]{-21,1,-20,123});
    states[1] = new State(new int[]{3,2,4,4,2,122},new int[]{-20,3});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{29,5,33,121});
    states[5] = new State(new int[]{30,9,35,-12,36,-12,37,-12,2,-12,29,-12,27,-12,38,-12,17,-12,20,-12,21,-12,39,-12,40,-12,43,-12,44,-12,22,-12,24,-12,25,-12,26,-12,45,-12},new int[]{-2,6,-3,11});
    states[6] = new State(new int[]{30,7});
    states[7] = new State(new int[]{42,8,3,-4,4,-4,2,-4});
    states[8] = new State(-5);
    states[9] = new State(new int[]{42,10,3,-7,4,-7,2,-7});
    states[10] = new State(-6);
    states[11] = new State(new int[]{35,117,36,118,37,119,2,120,29,-13,27,-13,38,-13,17,-13,20,-13,21,-13,39,-13,40,-13,43,-13,44,-13,22,-13,24,-13,25,-13,26,-13,45,-13,30,-13},new int[]{-4,12,-5,113,-1,114});
    states[12] = new State(new int[]{29,14,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42,22,83,24,91,25,97,26,101,45,110,2,112,30,-10},new int[]{-6,13,-7,18,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40,-8,82,-9,90,-10,96,-11,100});
    states[13] = new State(-14);
    states[14] = new State(new int[]{30,15,29,-13,27,-13,38,-13,17,-13,20,-13,21,-13,39,-13,40,-13,43,-13,44,-13,22,-13,24,-13,25,-13,26,-13,45,-13,2,-13},new int[]{-4,16});
    states[15] = new State(-20);
    states[16] = new State(new int[]{30,17,29,14,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42,22,83,24,91,25,97,26,101,45,110,2,112},new int[]{-6,13,-7,18,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40,-8,82,-9,90,-10,96,-11,100});
    states[17] = new State(-21);
    states[18] = new State(new int[]{31,19});
    states[19] = new State(-22);
    states[20] = new State(new int[]{35,23,36,33,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,21,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[21] = new State(new int[]{28,22});
    states[22] = new State(new int[]{31,-36,28,-36,8,-64,11,-64,18,-64,19,-64,16,-64,17,-64,9,-64,10,-64,12,-64,13,-64,14,-64,15,-64,6,-64,7,-64});
    states[23] = new State(new int[]{28,24});
    states[24] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,25,-19,36,-12,40});
    states[25] = new State(-61);
    states[26] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,27,-19,36,-12,40});
    states[27] = new State(-58);
    states[28] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,29,-19,36,-12,40});
    states[29] = new State(-59);
    states[30] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,31,-19,36,-12,40});
    states[31] = new State(-60);
    states[32] = new State(new int[]{35,23,36,33,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,43,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[33] = new State(new int[]{28,34});
    states[34] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,35,-19,36,-12,40});
    states[35] = new State(-62);
    states[36] = new State(-63);
    states[37] = new State(-65);
    states[38] = new State(-66);
    states[39] = new State(-67);
    states[40] = new State(-68);
    states[41] = new State(-69);
    states[42] = new State(-70);
    states[43] = new State(new int[]{28,44});
    states[44] = new State(-64);
    states[45] = new State(new int[]{5,46,8,-67,11,-67,18,-67,19,-67,16,-67,17,-67,9,-67,10,-67,12,-67,13,-67,14,-67,15,-67,6,-67,7,-67,31,-67,28,-67});
    states[46] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-17,47,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[47] = new State(new int[]{6,48,7,78,31,-37,28,-37});
    states[48] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-16,49,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[49] = new State(new int[]{9,50,10,67,12,69,13,71,14,73,15,75,6,-39,7,-39,31,-39,28,-39});
    states[50] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,51,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[51] = new State(new int[]{16,52,17,64,9,-42,10,-42,12,-42,13,-42,14,-42,15,-42,6,-42,7,-42,31,-42,28,-42});
    states[52] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-14,53,-13,63,-18,60,-19,36,-12,40});
    states[53] = new State(new int[]{18,54,19,61,16,-49,17,-49,9,-49,10,-49,12,-49,13,-49,14,-49,15,-49,6,-49,7,-49,31,-49,28,-49});
    states[54] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-13,55,-18,60,-19,36,-12,40});
    states[55] = new State(new int[]{8,56,11,58,18,-52,19,-52,16,-52,17,-52,9,-52,10,-52,12,-52,13,-52,14,-52,15,-52,6,-52,7,-52,31,-52,28,-52});
    states[56] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,57,-19,36,-12,40});
    states[57] = new State(-55);
    states[58] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-18,59,-19,36,-12,40});
    states[59] = new State(-56);
    states[60] = new State(-57);
    states[61] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-13,62,-18,60,-19,36,-12,40});
    states[62] = new State(new int[]{8,56,11,58,18,-53,19,-53,16,-53,17,-53,9,-53,10,-53,12,-53,13,-53,14,-53,15,-53,6,-53,7,-53,31,-53,28,-53});
    states[63] = new State(new int[]{8,56,11,58,18,-54,19,-54,16,-54,17,-54,9,-54,10,-54,12,-54,13,-54,14,-54,15,-54,6,-54,7,-54,31,-54,28,-54});
    states[64] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-14,65,-13,63,-18,60,-19,36,-12,40});
    states[65] = new State(new int[]{18,54,19,61,16,-50,17,-50,9,-50,10,-50,12,-50,13,-50,14,-50,15,-50,6,-50,7,-50,31,-50,28,-50});
    states[66] = new State(new int[]{18,54,19,61,16,-51,17,-51,9,-51,10,-51,12,-51,13,-51,14,-51,15,-51,6,-51,7,-51,31,-51,28,-51});
    states[67] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,68,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[68] = new State(new int[]{16,52,17,64,9,-43,10,-43,12,-43,13,-43,14,-43,15,-43,6,-43,7,-43,31,-43,28,-43});
    states[69] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,70,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[70] = new State(new int[]{16,52,17,64,9,-44,10,-44,12,-44,13,-44,14,-44,15,-44,6,-44,7,-44,31,-44,28,-44});
    states[71] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,72,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[72] = new State(new int[]{16,52,17,64,9,-45,10,-45,12,-45,13,-45,14,-45,15,-45,6,-45,7,-45,31,-45,28,-45});
    states[73] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,74,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[74] = new State(new int[]{16,52,17,64,9,-46,10,-46,12,-46,13,-46,14,-46,15,-46,6,-46,7,-46,31,-46,28,-46});
    states[75] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-15,76,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[76] = new State(new int[]{16,52,17,64,9,-47,10,-47,12,-47,13,-47,14,-47,15,-47,6,-47,7,-47,31,-47,28,-47});
    states[77] = new State(new int[]{16,52,17,64,9,-48,10,-48,12,-48,13,-48,14,-48,15,-48,6,-48,7,-48,31,-48,28,-48});
    states[78] = new State(new int[]{17,26,20,28,21,30,27,32,39,37,40,38,38,39,43,41,44,42},new int[]{-16,79,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[79] = new State(new int[]{9,50,10,67,12,69,13,71,14,73,15,75,6,-40,7,-40,31,-40,28,-40});
    states[80] = new State(new int[]{9,50,10,67,12,69,13,71,14,73,15,75,6,-41,7,-41,31,-41,28,-41});
    states[81] = new State(new int[]{6,48,7,78,31,-38,28,-38});
    states[82] = new State(-23);
    states[83] = new State(new int[]{27,84});
    states[84] = new State(new int[]{27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,85,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[85] = new State(new int[]{28,86});
    states[86] = new State(new int[]{29,14,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42,22,83,24,91,25,97,26,101,45,110,2,112},new int[]{-6,87,-7,18,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40,-8,82,-9,90,-10,96,-11,100});
    states[87] = new State(new int[]{23,88,29,-29,27,-29,38,-29,17,-29,20,-29,21,-29,39,-29,40,-29,43,-29,44,-29,22,-29,24,-29,25,-29,26,-29,45,-29,2,-29,30,-29});
    states[88] = new State(new int[]{29,14,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42,22,83,24,91,25,97,26,101,45,110,2,112},new int[]{-6,89,-7,18,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40,-8,82,-9,90,-10,96,-11,100});
    states[89] = new State(-30);
    states[90] = new State(-24);
    states[91] = new State(new int[]{27,92});
    states[92] = new State(new int[]{27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,93,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[93] = new State(new int[]{28,94});
    states[94] = new State(new int[]{29,14,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42,22,83,24,91,25,97,26,101,45,110,2,112},new int[]{-6,95,-7,18,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40,-8,82,-9,90,-10,96,-11,100});
    states[95] = new State(-31);
    states[96] = new State(-25);
    states[97] = new State(new int[]{38,98});
    states[98] = new State(new int[]{31,99});
    states[99] = new State(-32);
    states[100] = new State(-26);
    states[101] = new State(new int[]{41,104,27,106,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,102,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[102] = new State(new int[]{31,103});
    states[103] = new State(-33);
    states[104] = new State(new int[]{31,105});
    states[105] = new State(-34);
    states[106] = new State(new int[]{41,107,35,23,36,33,27,20,38,45,17,26,20,28,21,30,39,37,40,38,43,41,44,42},new int[]{-7,21,-17,81,-16,80,-15,77,-14,66,-13,63,-18,60,-19,36,-12,40});
    states[107] = new State(new int[]{28,108});
    states[108] = new State(new int[]{31,109});
    states[109] = new State(-35);
    states[110] = new State(new int[]{31,111});
    states[111] = new State(-27);
    states[112] = new State(-28);
    states[113] = new State(-11);
    states[114] = new State(new int[]{38,115});
    states[115] = new State(new int[]{31,116});
    states[116] = new State(-15);
    states[117] = new State(-17);
    states[118] = new State(-18);
    states[119] = new State(-19);
    states[120] = new State(-16);
    states[121] = new State(-8);
    states[122] = new State(-9);
    states[123] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-22, new int[]{-21,3});
    rules[2] = new Rule(-21, new int[]{-21,-20});
    rules[3] = new Rule(-21, new int[]{-20});
    rules[4] = new Rule(-20, new int[]{4,29,-2,30});
    rules[5] = new Rule(-20, new int[]{4,29,-2,30,42});
    rules[6] = new Rule(-20, new int[]{4,29,30,42});
    rules[7] = new Rule(-20, new int[]{4,29,30});
    rules[8] = new Rule(-20, new int[]{4,33});
    rules[9] = new Rule(-20, new int[]{2});
    rules[10] = new Rule(-2, new int[]{-3,-4});
    rules[11] = new Rule(-3, new int[]{-3,-5});
    rules[12] = new Rule(-3, new int[]{});
    rules[13] = new Rule(-4, new int[]{});
    rules[14] = new Rule(-4, new int[]{-4,-6});
    rules[15] = new Rule(-5, new int[]{-1,38,31});
    rules[16] = new Rule(-5, new int[]{2});
    rules[17] = new Rule(-1, new int[]{35});
    rules[18] = new Rule(-1, new int[]{36});
    rules[19] = new Rule(-1, new int[]{37});
    rules[20] = new Rule(-6, new int[]{29,30});
    rules[21] = new Rule(-6, new int[]{29,-4,30});
    rules[22] = new Rule(-6, new int[]{-7,31});
    rules[23] = new Rule(-6, new int[]{-8});
    rules[24] = new Rule(-6, new int[]{-9});
    rules[25] = new Rule(-6, new int[]{-10});
    rules[26] = new Rule(-6, new int[]{-11});
    rules[27] = new Rule(-6, new int[]{45,31});
    rules[28] = new Rule(-6, new int[]{2});
    rules[29] = new Rule(-8, new int[]{22,27,-7,28,-6});
    rules[30] = new Rule(-8, new int[]{22,27,-7,28,-6,23,-6});
    rules[31] = new Rule(-9, new int[]{24,27,-7,28,-6});
    rules[32] = new Rule(-10, new int[]{25,38,31});
    rules[33] = new Rule(-11, new int[]{26,-7,31});
    rules[34] = new Rule(-11, new int[]{26,41,31});
    rules[35] = new Rule(-11, new int[]{26,27,41,28,31});
    rules[36] = new Rule(-7, new int[]{27,-7,28});
    rules[37] = new Rule(-7, new int[]{38,5,-17});
    rules[38] = new Rule(-7, new int[]{-17});
    rules[39] = new Rule(-17, new int[]{-17,6,-16});
    rules[40] = new Rule(-17, new int[]{-17,7,-16});
    rules[41] = new Rule(-17, new int[]{-16});
    rules[42] = new Rule(-16, new int[]{-16,9,-15});
    rules[43] = new Rule(-16, new int[]{-16,10,-15});
    rules[44] = new Rule(-16, new int[]{-16,12,-15});
    rules[45] = new Rule(-16, new int[]{-16,13,-15});
    rules[46] = new Rule(-16, new int[]{-16,14,-15});
    rules[47] = new Rule(-16, new int[]{-16,15,-15});
    rules[48] = new Rule(-16, new int[]{-15});
    rules[49] = new Rule(-15, new int[]{-15,16,-14});
    rules[50] = new Rule(-15, new int[]{-15,17,-14});
    rules[51] = new Rule(-15, new int[]{-14});
    rules[52] = new Rule(-14, new int[]{-14,18,-13});
    rules[53] = new Rule(-14, new int[]{-14,19,-13});
    rules[54] = new Rule(-14, new int[]{-13});
    rules[55] = new Rule(-13, new int[]{-13,8,-18});
    rules[56] = new Rule(-13, new int[]{-13,11,-18});
    rules[57] = new Rule(-13, new int[]{-18});
    rules[58] = new Rule(-18, new int[]{17,-18});
    rules[59] = new Rule(-18, new int[]{20,-18});
    rules[60] = new Rule(-18, new int[]{21,-18});
    rules[61] = new Rule(-18, new int[]{27,35,28,-18});
    rules[62] = new Rule(-18, new int[]{27,36,28,-18});
    rules[63] = new Rule(-18, new int[]{-19});
    rules[64] = new Rule(-19, new int[]{27,-7,28});
    rules[65] = new Rule(-19, new int[]{39});
    rules[66] = new Rule(-19, new int[]{40});
    rules[67] = new Rule(-19, new int[]{38});
    rules[68] = new Rule(-19, new int[]{-12});
    rules[69] = new Rule(-12, new int[]{43});
    rules[70] = new Rule(-12, new int[]{44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> start, line
#line 34 "parser.y"
                       { ++lineno; }
#line default
        break;
      case 3: // start -> line
#line 35 "parser.y"
                 { ++lineno; }
#line default
        break;
      case 4: // line -> Program, BracketLeft, block, BracketRight
#line 38 "parser.y"
                                                { if(ValueStack[ValueStack.Depth-2].tree!=null)
														root = new Program(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-2].tree.line);}
#line default
        break;
      case 5: // line -> Program, BracketLeft, block, BracketRight, Komentarz2
#line 40 "parser.y"
                                                        {root = new Program(ValueStack[ValueStack.Depth-3].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 8: // line -> Program, Eof
#line 43 "parser.y"
                 { Console.WriteLine("No bracket of program");
			Kompilator.errors++;}
#line default
        break;
      case 9: // line -> error
#line 45 "parser.y"
           {Console.WriteLine("Parser Declaration error in line {0} ",ValueStack[ValueStack.Depth-1].line);
				Kompilator.errors++;				
				YYAbort();}
#line default
        break;
      case 10: // block -> declars, instrs
#line 53 "parser.y"
                        {
				if(ValueStack[ValueStack.Depth-1].tree==null && ValueStack[ValueStack.Depth-2].tree!=null)
					CurrentSemanticValue.tree=new Block(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-2].tree.line);
				else if(ValueStack[ValueStack.Depth-2].tree==null && ValueStack[ValueStack.Depth-1].tree!=null)
					CurrentSemanticValue.tree=new Block(ValueStack[ValueStack.Depth-1].tree.line,ValueStack[ValueStack.Depth-1].tree);
				else if(ValueStack[ValueStack.Depth-2].tree!=null && ValueStack[ValueStack.Depth-1].tree!=null)
					CurrentSemanticValue.tree=new Block(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);
				}
#line default
        break;
      case 11: // declars -> declars, declar
#line 65 "parser.y"
                          {CurrentSemanticValue.tree =new Declars(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 14: // instrs -> instrs, instr
#line 69 "parser.y"
                  {
				if(ValueStack[ValueStack.Depth-1].tree==null && ValueStack[ValueStack.Depth-2].tree!=null)
					CurrentSemanticValue.tree =new Instrs(ValueStack[ValueStack.Depth-1].tree.line,ValueStack[ValueStack.Depth-1].tree);
				else if(ValueStack[ValueStack.Depth-2].tree==null && ValueStack[ValueStack.Depth-1].tree!=null)
					CurrentSemanticValue.tree =new Instrs(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);
				else if(ValueStack[ValueStack.Depth-2].tree!=null && ValueStack[ValueStack.Depth-1].tree!=null)
				CurrentSemanticValue.tree =new Instrs(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 15: // declar -> typ, Ident, Semicolon
#line 79 "parser.y"
                              {CurrentSemanticValue.tree=new Declar(ValueStack[ValueStack.Depth-3].typ,ValueStack[ValueStack.Depth-2].val,ValueStack[ValueStack.Depth-2].line);}
#line default
        break;
      case 16: // declar -> error
#line 80 "parser.y"
           {Console.WriteLine("Parser Declaration error in line {0} ",ValueStack[ValueStack.Depth-1].line);
				Kompilator.errors++;				
				YYAbort();}
#line default
        break;
      case 17: // typ -> Int
#line 85 "parser.y"
            {CurrentSemanticValue.typ=Typ.Int;}
#line default
        break;
      case 18: // typ -> Double
#line 86 "parser.y"
            {CurrentSemanticValue.typ = Typ.Double;}
#line default
        break;
      case 19: // typ -> Bool
#line 87 "parser.y"
          {CurrentSemanticValue.typ =Typ.Bool;}
#line default
        break;
      case 21: // instr -> BracketLeft, instrs, BracketRight
#line 90 "parser.y"
                                     {CurrentSemanticValue.tree =ValueStack[ValueStack.Depth-2].tree;}
#line default
        break;
      case 22: // instr -> exp, Semicolon
#line 91 "parser.y"
                   {CurrentSemanticValue.tree= ValueStack[ValueStack.Depth-2].tree;}
#line default
        break;
      case 27: // instr -> Return, Semicolon
#line 96 "parser.y"
                      {CurrentSemanticValue.tree = new Return(ValueStack[ValueStack.Depth-2].line);}
#line default
        break;
      case 28: // instr -> error
#line 97 "parser.y"
           {Console.WriteLine("Parser Instruction error in line {0} ",ValueStack[ValueStack.Depth-1].line);
				Kompilator.errors++;
				
				YYAbort();}
#line default
        break;
      case 29: // cond -> If, OpenPar, exp, ClosePar, instr
#line 103 "parser.y"
                                      {CurrentSemanticValue.tree = new CondIf(ValueStack[ValueStack.Depth-3].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 30: // cond -> If, OpenPar, exp, ClosePar, instr, Else, instr
#line 104 "parser.y"
                                              {CurrentSemanticValue.tree = new CondIfElse(ValueStack[ValueStack.Depth-5].tree,ValueStack[ValueStack.Depth-3].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-5].tree.line);}
#line default
        break;
      case 31: // whileLoop -> While, OpenPar, exp, ClosePar, instr
#line 107 "parser.y"
                                             {
						if(ValueStack[ValueStack.Depth-3].tree!=null && ValueStack[ValueStack.Depth-1].tree!=null)
							CurrentSemanticValue.tree = new While(ValueStack[ValueStack.Depth-3].tree,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);
						else if(ValueStack[ValueStack.Depth-3].tree!=null)
							CurrentSemanticValue.tree = new While(ValueStack[ValueStack.Depth-3].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 32: // inRead -> Read, Ident, Semicolon
#line 113 "parser.y"
                               {CurrentSemanticValue.tree =new Read(ValueStack[ValueStack.Depth-2].val,ValueStack[ValueStack.Depth-2].line);}
#line default
        break;
      case 33: // outWrite -> Write, exp, Semicolon
#line 115 "parser.y"
                               {CurrentSemanticValue.tree =new WriteExp(ValueStack[ValueStack.Depth-2].tree,ValueStack[ValueStack.Depth-2].tree.line);}
#line default
        break;
      case 34: // outWrite -> Write, Napis, Semicolon
#line 116 "parser.y"
                           {CurrentSemanticValue.tree =new WriteNapis(ValueStack[ValueStack.Depth-2].val,ValueStack[ValueStack.Depth-2].line);}
#line default
        break;
      case 35: // outWrite -> Write, OpenPar, Napis, ClosePar, Semicolon
#line 117 "parser.y"
                                            {CurrentSemanticValue.tree =new WriteNapis(ValueStack[ValueStack.Depth-3].val,ValueStack[ValueStack.Depth-3].line);}
#line default
        break;
      case 36: // exp -> OpenPar, exp, ClosePar
#line 119 "parser.y"
                             {CurrentSemanticValue.tree=ValueStack[ValueStack.Depth-2].tree;}
#line default
        break;
      case 37: // exp -> Ident, Assign, logic
#line 120 "parser.y"
                        {CurrentSemanticValue.tree = new Assign(ValueStack[ValueStack.Depth-3].val,ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].line);}
#line default
        break;
      case 39: // logic -> logic, Or, rel
#line 123 "parser.y"
                      {CurrentSemanticValue.tree = new Logic(ValueStack[ValueStack.Depth-3].tree,"or",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 40: // logic -> logic, And, rel
#line 124 "parser.y"
                   {CurrentSemanticValue.tree = new Logic(ValueStack[ValueStack.Depth-3].tree,"and",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 42: // rel -> rel, Equal, adding
#line 127 "parser.y"
                         {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,"==",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 43: // rel -> rel, NotEqual, adding
#line 128 "parser.y"
                         {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,"!=",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 44: // rel -> rel, Greater, adding
#line 129 "parser.y"
                        {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,">",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 45: // rel -> rel, GreaterEqual, adding
#line 130 "parser.y"
                             {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,">=",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 46: // rel -> rel, Less, adding
#line 131 "parser.y"
                     {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,"<",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 47: // rel -> rel, LessEqual, adding
#line 132 "parser.y"
                          {CurrentSemanticValue.tree = new Relation(ValueStack[ValueStack.Depth-3].tree,"<=",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 49: // adding -> adding, Plus, term
#line 136 "parser.y"
               { CurrentSemanticValue.tree = new Add(ValueStack[ValueStack.Depth-3].tree,"+", ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 50: // adding -> adding, Minus, term
#line 138 "parser.y"
               { CurrentSemanticValue.tree = new Add(ValueStack[ValueStack.Depth-3].tree,"-", ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line) ;}
#line default
        break;
      case 52: // term -> term, Multiplies, bitexp
#line 143 "parser.y"
       {CurrentSemanticValue.tree = new Add(ValueStack[ValueStack.Depth-3].tree,"*",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 53: // term -> term, Divides, bitexp
#line 145 "parser.y"
       { CurrentSemanticValue.tree = new Add(ValueStack[ValueStack.Depth-3].tree,"/",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line) ;}
#line default
        break;
      case 55: // bitexp -> bitexp, Pipe, unar
#line 149 "parser.y"
                           {CurrentSemanticValue.tree = new Bit(ValueStack[ValueStack.Depth-3].tree,"|",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 56: // bitexp -> bitexp, BitAnd, unar
#line 150 "parser.y"
                        {CurrentSemanticValue.tree = new Bit(ValueStack[ValueStack.Depth-3].tree,"&",ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-3].tree.line);}
#line default
        break;
      case 58: // unar -> Minus, unar
#line 153 "parser.y"
                   {CurrentSemanticValue.tree= new UnarMinus(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 59: // unar -> Tilde, unar
#line 154 "parser.y"
                {CurrentSemanticValue.tree= new UnarTilda(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 60: // unar -> Not, unar
#line 155 "parser.y"
              {CurrentSemanticValue.tree= new UnarNot(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 61: // unar -> OpenPar, Int, ClosePar, unar
#line 156 "parser.y"
                               {CurrentSemanticValue.tree= new ToInt(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 62: // unar -> OpenPar, Double, ClosePar, unar
#line 157 "parser.y"
                                  {CurrentSemanticValue.tree= new ToDouble(ValueStack[ValueStack.Depth-1].tree,ValueStack[ValueStack.Depth-1].tree.line);}
#line default
        break;
      case 64: // factor -> OpenPar, exp, ClosePar
#line 160 "parser.y"
                                  { CurrentSemanticValue.tree = ValueStack[ValueStack.Depth-2].tree; ;}
#line default
        break;
      case 65: // factor -> IntNumber
#line 161 "parser.y"
                       {  CurrentSemanticValue.tree = new IntNumber(ValueStack[ValueStack.Depth-1].val,ValueStack[ValueStack.Depth-1].line)     ;}
#line default
        break;
      case 66: // factor -> RealNumber
#line 162 "parser.y"
                        { CurrentSemanticValue.tree = new RealNumber(ValueStack[ValueStack.Depth-1].val,ValueStack[ValueStack.Depth-1].line) ;}
#line default
        break;
      case 67: // factor -> Ident
#line 163 "parser.y"
                  { CurrentSemanticValue.tree = new Ident(ValueStack[ValueStack.Depth-1].val,ValueStack[ValueStack.Depth-1].line);}
#line default
        break;
      case 69: // boolVar -> True
#line 167 "parser.y"
                {CurrentSemanticValue.tree = new Bool(true,ValueStack[ValueStack.Depth-1].line);}
#line default
        break;
      case 70: // boolVar -> False
#line 168 "parser.y"
           {CurrentSemanticValue.tree = new Bool(false,ValueStack[ValueStack.Depth-1].line);}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 171 "parser.y"

int lineno=1;
public SyntaxTree root;
public Parser(Scanner scanner) : base(scanner)
{ 

}





#line default
}
}
